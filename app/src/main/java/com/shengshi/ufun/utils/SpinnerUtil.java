package com.shengshi.ufun.utils;import android.app.Activity;import android.graphics.Color;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.ColorDrawable;import android.view.Gravity;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.View.OnTouchListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.FrameLayout;import android.widget.LinearLayout;import android.widget.LinearLayout.LayoutParams;import android.widget.ListView;import android.widget.PopupWindow;import android.widget.PopupWindow.OnDismissListener;import com.shengshi.base.tools.AppHelper;import com.shengshi.ufun.R;import com.shengshi.ufun.adapter.circle.UFunTipOperationAdapter;/** * @author harry * @version Creat on 2014-4-15上午10:30:35 */public class SpinnerUtil {    /**     * SpinnerItem的回调接口     */    public interface OnSpinnerItemClickListener {        public void onSpinnerItemClick(int position);    }    public interface OnReplySpinnerBtnClickListener {        public void onBtnClick(String content);    }    public static PopupWindow createOperationListSpinner(            final Activity context, final View parent, String[] itemsArray,            final OnSpinnerItemClickListener listener) {        LayoutInflater inflater = LayoutInflater.from(context);        final FrameLayout parentLayout = (FrameLayout) inflater.inflate(                R.layout.spinner_operation, null);//		parentLayout.setGravity(Gravity.BOTTOM);        int screenWidth = AppHelper.getScreenWidth(context);        int screenHeight = AppHelper.getScreenHeight(context);        final PopupWindow mPopupWindow = new PopupWindow(parentLayout,                screenWidth, screenHeight, true);//		mPopupWindow.setFocusable(true);//		mPopupWindow.setBackgroundDrawable(new BitmapDrawable());         mPopupWindow                .setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        mPopupWindow.setAnimationStyle(R.style.lifecircle_popupwindow);        mPopupWindow.showAtLocation(parent, Gravity.BOTTOM, 0, 0);        final ListView mListView = (ListView) parentLayout.findViewById(R.id.lv_spinner);        final Button cancleBtn = (Button) parentLayout                .findViewById(R.id.btn_spinner);        UFunTipOperationAdapter adapter = new UFunTipOperationAdapter(                itemsArray, context);        mListView.setAdapter(adapter);        mPopupWindow.setFocusable(true);        mListView.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view,                                    int position, long id) {                if (listener != null) {                    listener.onSpinnerItemClick(position);                }                mPopupWindow.dismiss();            }        });        parentLayout.setOnTouchListener(new OnTouchListener() {            public boolean onTouch(View v, MotionEvent event) {                // setTvCityArrow(context, spinButton, false);                mPopupWindow.dismiss();                return true;            }        });        cancleBtn.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View view) {                mPopupWindow.dismiss();            }        });        mPopupWindow.setOnDismissListener(new OnDismissListener() {            @Override            public void onDismiss() {                // setTvCityArrow(context, spinButton, false);            }        });        return mPopupWindow;    }//	public static PopupWindow createReplySpinner(Activity context, final View parent,final OnReplySpinnerBtnClickListener listener){//		final InputMethodManager imm = (InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);//		LayoutInflater inflater = LayoutInflater.from(context);//		final FrameLayout parentLayout = (FrameLayout) inflater.inflate(//				R.layout.spinner_reply, null);//		final EditText edit = (EditText)parentLayout.findViewById(R.id.ed_input);//		edit.requestFocus();//		//		int screenWidth = AppHelper.getScreenWidth(context);//		int screenHeight = AppHelper.getScreenHeight(context);//		final PopupWindow mPopupWindow = new PopupWindow(parentLayout,//				screenWidth, screenHeight, true);//		mPopupWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));//		mPopupWindow.setAnimationStyle(R.style.lifecircle_popupwindow);//		mPopupWindow.showAtLocation(parent, Gravity.BOTTOM, 0, 0);//		mPopupWindow.setFocusable(true);//		//		return mPopupWindow;//	}    /**     * 没有确定键     *     * @param context     * @param parent     * @param itemsArray     * @param listener     * @return     */    public static PopupWindow createListSpinner(final Activity context,                                                final View parent, String[] itemsArray,                                                final OnSpinnerItemClickListener listener, int titleClickindex,                                                LinearLayout parentLayout) {        final PopupWindow mPopupWindow = new PopupWindow(parentLayout,                AppHelper.getScreenWidth(context), LayoutParams.MATCH_PARENT,                true);        mPopupWindow.setBackgroundDrawable(new BitmapDrawable());        mPopupWindow.showAsDropDown(parent, 0, 0);        final ListView mListView = (ListView) parentLayout                .findViewById(R.id.lv_mspinner);        final UFunTipOperationAdapter adapter = new UFunTipOperationAdapter(                itemsArray, context);        adapter.setSelectedPosition(titleClickindex);        mListView.setAdapter(adapter);        mPopupWindow.setFocusable(true);        mListView.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view,                                    int position, long id) {                if (listener != null) {                    listener.onSpinnerItemClick(position);                }                mPopupWindow.dismiss();            }        });        parentLayout.setOnTouchListener(new OnTouchListener() {            public boolean onTouch(View v, MotionEvent event) {                mPopupWindow.dismiss();                return true;            }        });        mPopupWindow.setOnDismissListener(new OnDismissListener() {            @Override            public void onDismiss() {            }        });        return mPopupWindow;    }    public static PopupWindow createOperationListSpinner(            final Activity context, final View parent, final int itemsId,            final OnSpinnerItemClickListener listener) {        String[] itemsArray = context.getResources().getStringArray(itemsId);        return createOperationListSpinner(context, parent, itemsArray, listener);    }    public static PopupWindow createListSpinner(final Activity context,                                                final View parent, final int itemsId, int titleClickindex,                                                LinearLayout parentLayout, final OnSpinnerItemClickListener listener) {        String[] itemsArray = context.getResources().getStringArray(itemsId);        return createListSpinner(context, parent, itemsArray, listener,                titleClickindex, parentLayout);    }}